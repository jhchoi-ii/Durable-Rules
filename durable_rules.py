# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.
"""

!pip install durable_rules
from durable.lang import *

humi = {
  'limit_value': 5, 
  'invalid_value': -999
}

temp = {
  'under_limit_value': 5,
  'upper_limit_value': 150,
  'invalid_value': -999
}

safe = 0
danger = 1
under_danger = -1

permissible = 3

disable = 0
enable = 1

with ruleset('system') :

#장비
  #장비등록
  @when_all((m.type == 'device'))
  def register(c):
    c.s.device.name = c.m.name

#습도
  #습도 비정상 데이터 수신
  @when_all((m.type == 'humi') & (m.value <= humi['invalid_value']))
  def _error(c):
    print("잘못된 데이터 수신.\r\n".format(c.m.date))
  
  #습도 정상범위내 데이터 수신
  @when_all((m.type == 'humi') & (m.value < humi['limit_value']) & (m.value > humi['invalid_value']))
  def event(c):    
    if c.s.humi.level == safe:
      c.s.humi.count += 1
    else:
      c.s.humi.count = 1
      c.s.humi.date = c.m.date
      c.s.humi.level = safe
      print('습도 알람->정상 상태초기화 {0}\r\n'.format(c.m.date))

  #습도 정상범위 이상 데이터 수신
  @when_all((m.type == 'humi') & (m.value >= humi['limit_value']))
  def event(c):
    
    if c.s.humi.level == danger:
      c.s.humi.count += 1
    else:
      c.s.humi.count = 1
      c.s.humi.date = c.m.date
      c.s.humi.level = danger
      print('습도 정상->알람 상태초기화 {0}\r\n'.format(c.m.date))

  #습도, 같은 범위의 데이터가 일정 횟수 이상 지속되는 경우, 알람 판단
  @when_all((s.humi.status == 'event') & (s.humi.count == permissible))
  def alarm(c):
    c.assert_fact('system', {'type': 'humi', 'status': "alarm", 'level': c.s.humi.level, 'date': c.s.humi.date})
    c.s.humi.count += 1

  #습도, 정상 범위 이상 알람 발생 
  @when_all((m.type == 'humi') & (m.status == 'alarm') & (m.level == danger))
  def notify(c):
    print('{0} 의 습도가 허용치 이상입니다.\r\n'.format(c.s.device.name))

  #습도, 정상 범위 알람 발생
  @when_all((m.type == 'humi') & (m.status == 'alarm') & (m.level == safe))
  def notify(c):
    print('{0} 의 습도가 정상범위입니다.\r\n'.format(c.s.device.name))


#온도
  #온도, 비정상 데이터 수신
  @when_all((m.type == 'temp') & (m.value <= humi['invalid_value']))
  def _error(c):
    print("잘못된 데이터 수신.\r\n".format(c.m.date))

  #온도, 정상 범위 내 데이터 수신.
  @when_all((m.type == 'temp') & (m.value > temp['under_limit_value']) & (m.value < temp['upper_limit_value']))
  def event(c):    
    if c.s.temp.level == safe:
      c.s.temp.count += 1
    else:
      c.s.temp.count = 1
      c.s.temp.date = c.m.date
      c.s.temp.level = safe
      print('온도 알람->정상 상태변화. 카운트 초기화 {0}\r\n'.format(c.m.date))

  #온도, 정상 범위 이상 데이터 수신
  @when_all((m.type == 'temp') & (m.value >= temp['upper_limit_value']))
  def event(c):
    
    if c.s.temp.level == danger:
      c.s.temp.count += 1
    else:
      c.s.temp.count = 1
      c.s.temp.date = c.m.date
      c.s.temp.level = danger
      print('온도 정상->상한 알람 상태변화. 카운트 초기화 {0}\r\n'.format(c.m.date))

  #온도, 정상범위 이하
  @when_all((m.type == 'temp') & (m.value <= temp['under_limit_value']) & (m.value > temp['invalid_value']))
  def event(c):
    
    if c.s.temp.level == under_danger:
      c.s.temp.count += 1
    else:
      c.s.temp.count = 1
      c.s.temp.date = c.m.date
      c.s.temp.level = under_danger
      print('온도 정상->하한 알람 상태변화. 카운트 초기화 {0}\r\n'.format(c.m.date))

  #온도, 같은 범위의 온도가 지속되는 경우, 알람 판단.
  @when_all((s.temp.status == 'event') & (s.temp.count == permissible))
  def alarm(c):
    c.assert_fact('system', {'type': 'temp', 'status': "alarm", 'level': c.s.temp.level, 'date': c.s.temp.date})
    c.s.temp.count += 1

  #온도, 같은 범위의 온도가 지속되는 경우, 알람 판단
  @when_all((m.type == 'temp') & (m.status == 'alarm') & (m.level == danger))
  def notify(c):
    print('{0} 의 온도가 정상범위 이상입니다.\r\n'.format(c.s.device.name))

  #온도, 정상 범위 알람 발생
  @when_all((m.type == 'temp') & (m.status == 'alarm') & (m.level == safe))
  def notify(c):
    print('{0} 의 습도가 정상범위입니다.\r\n'.format(c.s.device.name))

  #온도, 정상 범위 이하 알람 발생.
  @when_all((m.type == 'temp') & (m.status == 'alarm') & (m.level == under_danger))
  def notify(c):
    print('{0} 의 온도가 정상범위 미만입니다.\r\n'.format(c.s.device.name))

print()
update_state('system', {'device': {'name': '-'},
                        'humi': {'type': 'humi', 'status': "event", 'level': safe, 'count': permissible + 1, 'date': '2021-03-30 16:50:00'}, 
                        'temp': {'type': 'temp', 'status': "event", 'level': safe, 'count': permissible + 1, 'date': '2021-03-30 16:50:00'}})

assert_fact('system', {'type': 'device', 'name': '장비'})

post('system', {'type': 'humi', 'value': 10, 'date': '2021-03-30 17:00:00'})
post('system', {'type': 'humi', 'value': -9999, 'date': '2021-03-30 17:01:00'})
post('system', {'type': 'humi', 'value': 12, 'date': '2021-03-30 17:02:00'})
post('system', {'type': 'humi', 'value': 1, 'date': '2021-03-30 17:03:00'})
post('system', {'type': 'humi', 'value': -999, 'date': '2021-03-30 17:04:00'})
post('system', {'type': 'humi', 'value': 2, 'date': '2021-03-30 17:05:00'})
post('system', {'type': 'humi', 'value': 3, 'date': '2021-03-30 17:06:00'})

post('system', {'type': 'temp', 'value': 10, 'date': '2021-03-30 17:00:00'})
post('system', {'type': 'temp', 'value': 4, 'date': '2021-03-30 17:01:00'})
post('system', {'type': 'temp', 'value': 3, 'date': '2021-03-30 17:02:00'})
post('system', {'type': 'temp', 'value': 2, 'date': '2021-03-30 17:03:00'})
post('system', {'type': 'temp', 'value': 12, 'date': '2021-03-30 17:04:00'})
post('system', {'type': 'temp', 'value': 21, 'date': '2021-03-30 17:05:00'})
post('system', {'type': 'temp', 'value': 22, 'date': '2021-03-30 17:06:00'})
post('system', {'type': 'temp', 'value': 23, 'date': '2021-03-30 17:07:00'})